# -*- coding: utf-8 -*-
"""sentiment_analysis Cluster 4--Huawei & Honor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/133IqKMj6uryeiF0UmQWwb52u_M6-e2Nn
"""

!pip install scikit-plot
!pip install afinn
!pip install newspaper3k

#imports
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import scikitplot as skplot


from wordcloud import WordCloud
import re

# text imports

import spacy
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer,TfidfVectorizer  
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')
from afinn import Afinn
from newspaper import Article
from textblob import TextBlob

#Honor 6 plus
hon_URL = 'https://www.techradar.com/sg/reviews/phones/mobile-phones/honor-6-plus-1279376/review'
article = Article(hon_URL)
article.download()
article.parse()
wc = WordCloud(background_color="white")
wordcloud = wc.generate(article.text)

# # Display the  plot:
plt.imshow(wordcloud)
plt.axis("off")
plt.show()

text = article.text.replace('\n', '')
one_sentences = text.split('.')

def polarity_score(text):
    p = TextBlob(text).sentiment.polarity
    return p

def subjectivity_score(text):
    s = TextBlob(text).sentiment.subjectivity
    return s

def sent_score(text):
    afinn=Afinn()
    return afinn.score(text)

#Calculate Scores and complie them in a df
def calculate_scores(df):
    df = df.copy(deep = True)
    
    df['polarity'] = df.Sentences.apply(polarity_score)

    df['subjectivity'] = df.Sentences.apply(subjectivity_score)

    df['sent'] = df.Sentences.apply(sent_score)
    return df

hon_df = pd.DataFrame({'Sentences' : one_sentences, 'Model' : 'Honor 6 plus X', 'Label' : '0'} )

hon_df['polarity'] = hon_df.Sentences.apply(polarity_score)

hon_df['subjectivity'] = hon_df.Sentences.apply(subjectivity_score)

hon_df['sent'] = hon_df.Sentences.apply(sent_score)

hon_df.plot.scatter('polarity', 'subjectivity')
plt.show()

sns.lmplot('polarity', 'sent', data = hon_df)
plt.show()

#Huawei Nexus 6P

hua_URL = 'https://www.techradar.com/sg/reviews/phones/mobile-phones/nexus-6p-1305318/review'
article2 = Article(hua_URL)
article2.download()
article2.parse()
wcd = WordCloud(background_color="white")
wordcloud2 = wc.generate(article2.text)

# # Display the  plot:
plt.imshow(wordcloud2)
plt.axis("off")
plt.show()

text = article2.text.replace('\n', '')
hua_sentences = text.split('.')

hua_df = pd.DataFrame({'Sentences' : hua_sentences, 'Model' : 'Huawei Nexus 6P 2', 'Label' : '0'} )

hua_df = calculate_scores(hua_df)

hua_df.plot.scatter('polarity', 'subjectivity')
plt.show()

sns.lmplot('polarity', 'sent', data = hua_df)
plt.show()
hon_df = hon_df.append(hua_df)

hon_df.groupby('Model').mean()











